---
description: 
globs: 
alwaysApply: false
---
# 🗂️ Project Structure – Noodle Balance

This document defines folder/file rules and conventions for organizing the Phaser 3 + React game project, using good web/mobile practices and PropTypes for React components.

---

## 📁 Root Structure

```
root/
│
├── public/                     # Static files, favicon, index.html
├── src/
│   ├── assets/                # Images, spritesheets, tilesets
│   ├── components/           # React UI components (.jsx)
│   │   ├── common/           # Reusable: buttons, modals, sliders
│   │   ├── ...               # UI components
│   ├── game/                 # Phaser game logic
│   │   ├── scenes/           # Phaser Scenes (.js)
│   │   ├── objects/          # Custom GameObjects
│   │   └── utils/            # Game-related utilities
│   ├── constants/            # Enums, shared configs
│   ├── hooks/                # React custom hooks
│   ├── services/             # API/localStorage/save/load services
│   ├── styles/               # Tailwind or custom CSS
│   ├── App.jsx               # Root React app
│   └── main.jsx              # Entry point (Phaser + React)
├── .eslintrc.cjs              # Lint config
├── vite.config.js             # Vite + Phaser setup
└── README.md
```

---

## 📐 Conventions

### 📦 React Components (`/components`)
- Files are `.jsx`
- Any component that receives props **must** use `PropTypes`
- Function components only
- Example:

```jsx
import PropTypes from 'prop-types';

export function MoodBar({ value }) {
  return <div className="mood-bar">Mood: {value}/3</div>;
}

MoodBar.propTypes = {
  value: PropTypes.number.isRequired,
};
```

---

### 🕹️ Game Scenes (`/game/scenes`)
- Files are `.js` (not JSX)
- Each Phaser scene is a class extending `Phaser.Scene`
- File name = class name (`MenuScene.js` → `MenuScene`)

```js
export default class DeliveryScene extends Phaser.Scene {
  constructor() {
    super({ key: 'DeliveryScene' });
  }

  create() {
    this.add.image(0, 0, 'background').setOrigin(0);
  }
}
```

---

## 📲 Responsiveness Guidelines

- React UI should be **mobile-first**:
  - Large click/tap zones
  - Minimum font-size 14px
  - Touch-friendly buttons

- Phaser scenes must:
  - Use `this.scale` to fit screen size
  - Adapt aspect ratio for mobile/desktop
  - Prevent double-tap zoom on mobile

---

## ✅ Best Practices

- Use `camelCase` for files unless it's a **Scene**: `PascalCase.js`
- Avoid business logic in UI – delegate to `hooks/` or `services/`
- Use a `GameWrapper` to encapsulate Phaser inside React

---

## 📌 TODOs
- Script: create a new Phaser scene from CLI
- Add debug logging system under `game/utils/`
- Add light Vitest tests for key React components
